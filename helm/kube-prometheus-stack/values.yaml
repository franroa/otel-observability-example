kube-prometheus-stack:
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  prometheus:
    prometheusSpec:
      # discover ServiceMonitor in all namespaces
      serviceMonitorSelectorNilUsesHelmValues: false
      enableFeatures:
        - exemplar-storage
  grafana:
    sidecar:
      dashboards:
        searchNamespace: ALL
    additionalDataSources:
      # this follows https://github.com/grafana/tns/blob/main/production/docker-compose/datasources.yaml
      # see also the additional links to Grafana docs specific for data sources
      - name: Loki
        type: loki
        uid: loki
        access: proxy
        url: http://loki.loki:3100
        # https://grafana.com/docs/grafana/latest/datasources/loki/#configure-the-data-source-with-provisioning
        jsonData:
          derivedFields:
            - name: trace_id
              datasourceUid: tempo
              matcherRegex: (?:traceID|trace_id)=(\w+)
              url: '$${__value.raw}'
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        url: http://kube-prometheus-stack-prometheus:9090/
        # https://grafana.com/docs/grafana/latest/datasources/prometheus/#provision-the-prometheus-data-source
        jsonData:
          exemplarTraceIdDestinations:
            - name: traceID # golang example
              datasourceUid: tempo
            - name: trace_id # spring example
              datasourceUid: tempo
              # https://github.com/grafana-operator/grafana-operator/blob/master/api/integreatly/v1alpha1/grafanadatasource_types.go#L205
              urlDisplayLabel: View in Tempo
      - name: Tempo
        type: tempo
        uid: tempo
        access: proxy
        url: http://tempo.tempo:3100
        # https://grafana.com/docs/grafana/latest/datasources/tempo/#provision-the-tempo-data-source
        jsonData:
          nodeGraph:
            enabled: true
          httpMethod: GET
          tracesToLogs:
            datasourceUid: 'loki'
            # they must be attached by the instrumentation
            tags: [ 'app', 'instance', 'pod', 'namespace' ]
            lokiSearch: true
            # extend time span a little, to ensure catching all logs of that span
            spanStartTimeShift: 200s
#             spanEndTimeShift: 1h
            filterByTraceID: true
#             filterBySpanID: true
          serviceMap:
            datasourceUid: 'prometheus'
          search:
            hide: false
          nodeGraph:
            enabled: true
          lokiSearch:
            datasourceUid: 'loki'
    # Make anon login be the Admin for demo purposes! NEVER USE IN PRODUCTION SYSTEMS!
    grafana.ini:
      auth:
        disable_login_form: true
      auth.anonymous:
        enabled: true
        org_name: "Main Org."
        org_role: Admin
      feature_toggles:
        enable: tempoSearch

defaultRules:
  create: true
  rules:
    etcd: false
    kubeApiserver: false
    kubeApiserverAvailability: false
    kubeApiserverError: false
    kubeApiserverSlos: false
    kubelet: true
    kubeScheduler: false
    time: false
    node: true
    kubernetesSystem: false
    general: true
    alertmanager: true
    k8s: true
    kubePrometheusGeneral: true
    kubePrometheusNodeAlerting: true
    kubePrometheusNodeRecording: true
    kubernetesAbsent: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubeStateMetrics: true
    network: true
    prometheus: true
    prometheusOperator: true
