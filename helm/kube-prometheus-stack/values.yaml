kube-prometheus-stack:
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  prometheus:
    prometheusSpec:
      # discover ServiceMonitor in all namespaces
      serviceMonitorSelectorNilUsesHelmValues: false
      enableFeatures:
        - exemplar-storage
  grafana:
    env:
      # Pyroscope env vars
      GF_INSTALL_PLUGINS: grafana-pyroscope-app
      # GF_AUTH_ANONYMOUS_ENABLED: "true"
      # GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_DIAGNOSTICS_PROFILING_ENABLED: "true"
      GF_DIAGNOSTICS_PROFILING_ADDR: 0.0.0.0
      GF_DIAGNOSTICS_PROFILING_PORT: 6060
    sidecar:
      dashboards:
        searchNamespace: ALL
    additionalDataSources:
      - name: Pyroscope-Test
        type: pyroscope
        uid: pyroscope-test
        url: http://pyroscope-querier.pyroscope-test.svc.cluster.local.:4040/
      # this follows https://github.com/grafana/tns/blob/main/production/docker-compose/datasources.yaml
      # see also the additional links to Grafana docs specific for data sources
      - name: Loki
        type: loki
        uid: loki
        access: proxy
        # url: http://loki-gateway.loki.svc.cluster.local/
        url: http://loki-loki-distributed-gateway.loki
        # https://grafana.com/docs/grafana/latest/datasources/loki/#configure-the-data-source-with-provisioning
        jsonData:
          derivedFields:
            - name: trace_id
              datasourceUid: tempo
              matcherRegex: (?:traceID|trace_id)=(\w+)
              url: "$${__value.raw}"
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        url: http://kube-prometheus-stack-prometheus:9090/
        # https://grafana.com/docs/grafana/latest/datasources/prometheus/#provision-the-prometheus-data-source
        jsonData:
          exemplarTraceIdDestinations:
            - name: traceID # golang example
              datasourceUid: tempo
            - name: trace_id # spring example
              datasourceUid: tempo
              # https://github.com/grafana-operator/grafana-operator/blob/master/api/integreatly/v1alpha1/grafanadatasource_types.go#L205
              urlDisplayLabel: View in Tempo
      - name: Pyroscope
        type: grafana-pyroscope-datasource
        access: proxy
        orgId: 1
        uid: pyroscope
        url: http://pyroscope.pyroscope:4040
      - name: Tempo
        type: tempo
        uid: tempo
        access: proxy
        url: http://tempo.tempo:3100
        # https://grafana.com/docs/grafana/latest/datasources/tempo/#provision-the-tempo-data-source
        jsonData:
          httpMethod: GET
          tracesToLogsV2:
            tags:
              [
                { key: "app" },
                { key: "namespace" },
                { key: "pod" },
                { key: "instance" },
              ]
            datasourceUid: "loki"
            spanStartTimeShift: "-10m"
            spanEndTimeShift: "10m"
            # tags: ["app", "instance", "pod", "namespace"] # NOTE I put the four labels because I have two different projects which are using different labels
            filterByTraceID: false
            filterBySpanID: false
            customQuery: true
            query: "{$${__tags}} |= `$${__span.traceId}`"
          # tracesToLogs:
          #   datasourceUid: "loki"
          #   # they must be attached by the instrumentation
          #   tags: ["app", "instance", "pod", "namespace", "job"] # NOTE I put the four labels because I have two different projects which are using different labels
          #   lokiSearch: true
          #   # extend time span a little, to ensure catching all logs of that span
          #   spanStartTimeShift: 200s
          #   #             spanEndTimeShift: 1h
          #   filterByTraceID: true
          tracesToMetrics:
            datasourceUid: "prometheus"
            spanStartTimeShift: "1h"
            spanEndTimeShift: "-1h"
            tags:
              [
                { key: "service.name", value: "service_name" },
                { key: "job" },
                { key: "app" },
                { key: "namespace" },
                { key: "pod" },
                { key: "instance" },
              ]
            queries:
              - name: "Sample query"
                query: "sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))"
          tracesToProfiles:
            customQuery: false
            query: 'method="$${__span.tags.method}"'
            datasourceUid: "pyroscope"
            # tags: ["job", "app", "instance", "pod", "namespace"]
            profileTypeId: "process_cpu:cpu:nanoseconds:cpu:nanoseconds"
            tags:
              [
                { key: "host.name", value: "hostname" },
                { key: "service.name", value: "service_name" },
                { key: "job" },
                { key: "app" },
                { key: "namespace" },
                { key: "pod" },
                { key: "instance" },
              ]
          serviceMap:
            datasourceUid: "prometheus"
          search:
            hide: false
          nodeGraph:
            enabled: true
          traceQuery:
            timeShiftEnabled: true
            spanStartTimeShift: "1h"
            spanEndTimeShift: "-1h"
          spanBar:
            type: "Tag"
            tag: "http.path"
          lokiSearch:
            datasourceUid: "loki"
    # Make anon login be the Admin for demo purposes! NEVER USE IN PRODUCTION SYSTEMS!
    grafana.ini:
      auth:
        disable_login_form: true
      auth.anonymous:
        enabled: true
        org_name: "Main Org."
        org_role: Admin
      feature_toggles:
        enable: tempoSearch

defaultRules:
  create: true
  rules:
    etcd: false
    kubeApiserver: false
    kubeApiserverAvailability: false
    kubeApiserverError: false
    kubeApiserverSlos: false
    kubelet: true
    kubeScheduler: false
    time: false
    node: true
    kubernetesSystem: false
    general: true
    alertmanager: true
    k8s: true
    kubePrometheusGeneral: true
    kubePrometheusNodeAlerting: true
    kubePrometheusNodeRecording: true
    kubernetesAbsent: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubeStateMetrics: true
    network: true
    prometheus: true
    prometheusOperator: true
